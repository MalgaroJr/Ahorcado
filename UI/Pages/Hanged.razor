@page "/Ahorcado"
@using ClasesAhorcado
@inject NavigationManager navegar
@inject IJSRuntime JS
@inject ILocalStorageService _localStorageService;
@inherits INBase

<PageTitle>Ahorcado</PageTitle>
<style>
    .rojo{
        color: #D51813;
    }
    .verde{
        color: #1BCE32;
    }
</style>
<body>
    <div class="container-fluid">  
        <div class="row" id="areainicio">
            <div class="col">
                <label>Palabra a adivinar</label>
                <input type="password" class="form-control" name="palabra" @bind="@palabra" />
            </div>
            <div class="col">
                <br />
                <button type="button" class="btn btn-primary" name="btnIngresar" @onclick="@(async ()=>await genPalabra())">Ingresar</button>
            </div>
        </div>
        <div class="row" id="areajuego" hidden="hidden">
            <div class="col-3">
                <label>Ingrese letra o palabra</label>
                <input type="text" class="form-control" name="letra" @bind="intento"/>
            </div>
            <div class="col-1">
                <br />
                <button type="button" class="btn btn-success" @onclick="@(async ()=>await probar())">Probar</button>
            </div>
            <div class="col">
                <label>Letras usadas</label>
                <br />
                <label class="rojo">@letras</label> 
            </div>
            <div class="col">
                <label>Vidas restantes</label>
                <br />
                <label>@vidas</label>
            </div>
        </div>
        <div class="row">
            <div class="text-center">
                <h3>@palabraAdivina</h3>
            </div>
        </div>
        <div class="row">
            <div class="text-center">
                <h3 name="result" >@resultado</h3>
                <br />
                <h3> @laPalabraEra </h3>
            </div>
        </div>
    </div>
    <div class="row text-center">
        <canvas id="myCanvas" width="500" height="500" style="border:1px solid #d3d3d3;"></canvas> 
    </div>
    <div class="row" id="areareset" hidden="hidden">
        <p class="h5">@msg</p>
        <div class="text-lg-end">
            <button class="btn btn-success" @onclick="@(()=>navegar.NavigateTo("/Ahorcado"))">Jugar de nuevo</button>
        </div>
    </div>
</body>

@code {
    private string palabra = "";
    private string palabra2 = "";
    private string intento = "";
    private string letras = "";
    private int vidas = 7;
    private string resultado = "";
    private string palabraAdivina = "";
    private string laPalabraEra = "";
    private Usuario u = new Usuario();

    private async Task genPalabra()
    {
        u.nuevoJuego(palabra);
        palabra2 = palabra;
        palabra = "";
        resultado = "";
        letras = "";
        vidas = 7;
        palabraAdivina = "";
        laPalabraEra = "";
        await JS.InvokeVoidAsync("iniciarjuego");
    }
    private async Task probar()
    {
        char i = intento[0];
        Resultados r = u.Ingresar(i);
        palabraAdivina = u.getEstado();
        letras = u.getLetras();
        vidas = u.getVidas();
        await dibujar(vidas);
        if(r == Resultados.Ganaste)
        {
            resultado = "Ganaste!";
            await guardarjuego();
        }
        else if(vidas == 0)
        {
            resultado = "Perdiste! :(";
            laPalabraEra = palabra2;
            palabra2 = "";
            await guardarjuego();
        }
        intento = "";
    }

    protected string yourName;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        yourName = await _localStorageService.GetItemAsStringAsync("username");
        await dibujar(vidas);
        if (string.IsNullOrEmpty(yourName))
        {
            navegar.NavigateTo("/");
        }
    }

    protected async Task dibujar(int v)
    {
        switch (v)
        {
            case 0:
                {
                    await JS.InvokeVoidAsync("ahorcar");
                    break; 
                };
            case 1:
                { 
                    await JS.InvokeVoidAsync("pieizquierdo");
                    break; 
                };
            case 2:
                { 
                    await JS.InvokeVoidAsync("piederecho");
                    break; 
                };
            case 3:
                {
                    await JS.InvokeVoidAsync("manoizquierda");
                    break;
                };
            case 4:
                { 
                    await JS.InvokeVoidAsync("manoderecha");
                    break; 
                };
            case 5:
                { 
                    await JS.InvokeVoidAsync("cuerpo");
                    break; 
                };
            case 6:
                { 
                    await JS.InvokeVoidAsync("cabeza");
                    break;
                };
            case 7:
                { 
                    await JS.InvokeVoidAsync("nuevo");
                    break; 
                };
        }
    }

    protected async Task guardarjuego()
    {
        Juego j = u.Juegos.Last();
        msg = "Guardando";
        yourName = await _localStorageService.GetItemAsStringAsync("username");
        u.Username = yourName;
        try
        {
            await RegistrarJuego(u);
        }
        catch (Exception e)
        {
            msg = e.Message;
            return;
        }
        
        await JS.InvokeVoidAsync("juegoterminado");
        msg = "Juego registrado!";
    }
}
